import streamlit as st
from supabase import create_client
import pandas as pd
import uuid
from datetime import datetime
import matplotlib.pyplot as plt
from st_aggrid import AgGrid
from st_aggrid.grid_options_builder import GridOptionsBuilder

# Configurer l'application en mode large
st.set_page_config(layout="wide")

# Charger les secrets de Streamlit Cloud
SUPABASE_URL = st.secrets["SUPABASE_URL"]
SUPABASE_KEY = st.secrets["SUPABASE_KEY"]

# Connexion √† Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# Initialisation de l'√©tat de session pour l'utilisateur
if "user" not in st.session_state:
    st.session_state["user"] = None

# Fonctions utilitaires
def get_user_meals(user_id):
    """R√©cup√®re les repas d'un utilisateur."""
    response = supabase.table("meals").select("*").eq("user_id", user_id).execute()
    return response.data if response else []


def get_meal_photos(meal_id):
    """R√©cup√®re les photos associ√©es √† un repas."""
    response = supabase.table("meal_photos").select("*").eq("meal_id", meal_id).execute()
    return response.data if response else []

# Fonction utilitaire pour enregistrer un entra√Ænement
def add_training(user_id, training_type, date, duration, calories_burned):
    """Ajoute un entra√Ænement pour un utilisateur."""
    # Convertir la date en format ISO (YYYY-MM-DD)
    date_str = date.strftime("%Y-%m-%d") if isinstance(date, datetime) else str(date)

    response = supabase.table("trainings").insert({
        "user_id": user_id,
        "training_type": training_type,
        "date": date_str,  # Utilisation de la date convertie
        "duration": duration,
        "calories_burned": calories_burned,
    }).execute()
    return response

# Fonction utilitaire pour r√©cup√©rer les entra√Ænements d'un utilisateur
def get_user_trainings(user_id):
    """R√©cup√®re les entra√Ænements d'un utilisateur."""
    response = supabase.table("trainings").select("*").eq("user_id", user_id).execute()
    return response.data if response else []

# Interface utilisateur
def show_welcome_message():
    """Affiche un message de bienvenue pour l'utilisateur connect√©."""
    user = st.session_state["user"]
    if user:
        st.markdown(f"### Bienvenue, **{user['email']}** sur l'Appapoute ! ")
    else:
        st.markdown("### Bienvenue sur l'application Nutrition App !")
# Fonction pour ajouter un pictogramme en fonction du type d'entra√Ænement
def get_training_icon(training_type):
    icons = {
        "Course": "üèÉ‚Äç‚ôÇÔ∏è",
        "V√©lo": "üö¥‚Äç‚ôÄÔ∏è",
        "Musculation": "üèãÔ∏è‚Äç‚ôÇÔ∏è",
        "Natation": "üèä‚Äç‚ôÄÔ∏è",
        "Marche": "üö∂‚Äç‚ôÇÔ∏è",
    }
    return icons.get(training_type, "‚ùì")  # Par d√©faut, un point d'interrogation


# Menu principal mis √† jour
menu = st.sidebar.selectbox(
    "Menu", [
        "Inscription", 
        "Connexion", 
        "Mon Profil", 
        "Ajouter un repas", 
        "Voir les repas", 
        "Ajouter un entra√Ænement", 
        "Voir les entra√Ænements", 
        "Suggestions personnalis√©es", 
        "Visualisations avanc√©es"
    ]
)

show_welcome_message()

if menu == "Inscription":
    st.header("Cr√©er un compte")
    email = st.text_input("Email")
    password = st.text_input("Mot de passe", type="password")
    if st.button("S'inscrire"):
        try:
            response = supabase.auth.sign_up({
                "email": email,
                "password": password
            })
            if response.user:
                st.success("Inscription r√©ussie ! Un email de v√©rification a √©t√© envoy√©.")
            elif response.error:
                st.error(f"Erreur : {response.error['message']}")
            else:
                st.error("Une erreur inconnue s'est produite.")
        except Exception as e:
            st.error(f"Erreur inattendue : {str(e)}")

if menu == "Connexion":
    st.header("Se connecter")
    email = st.text_input("Email")
    password = st.text_input("Mot de passe", type="password")
    if st.button("Connexion"):
        try:
            response = supabase.auth.sign_in_with_password({"email": email, "password": password})
            if response.user:
                st.success("Connexion r√©ussie !")
                st.session_state["user"] = {"id": response.user.id, "email": response.user.email}
            else:
                st.error(f"Erreur : {response.get('error', {}).get('message', 'Erreur inconnue')}")

        except Exception as e:
            st.error(f"Erreur inattendue : {str(e)}")

if menu == "Mon Profil":
    if st.session_state["user"] is None:
        st.warning("Veuillez vous connecter pour acc√©der √† votre profil.")
    else:
        user = st.session_state["user"]
        st.header("Votre Profil")
        st.markdown(f"**Email** : {user['email']}")
        if st.button("D√©connexion"):
            st.session_state["user"] = None
            st.success("Vous avez √©t√© d√©connect√©.")

if menu == "Ajouter un repas":
    if st.session_state["user"] is None:
        st.warning("Veuillez vous connecter pour ajouter un repas.")
    else:
        st.header("Ajouter un repas")
        name = st.text_input("Nom du repas")
        calories = st.slider("Calories", 0, 5000, 0)
        proteins = st.slider("Prot√©ines (g)", 0, 100, 0)
        carbs = st.slider("Glucides (g)", 0, 100, 0)
        fats = st.slider("Lipides (g)", 0, 100, 0)

        uploaded_files = st.file_uploader(
            "T√©l√©chargez une ou plusieurs photos du repas", type=["png", "jpg", "jpeg"], accept_multiple_files=True
        )

        if st.button("Ajouter"):
            try:
                user_id = st.session_state["user"]["id"]
                meal_data = {
                    "user_id": user_id,
                    "name": name,
                    "calories": calories,
                    "proteins": proteins,
                    "carbs": carbs,
                    "fats": fats,
                }
                meal_response = supabase.table("meals").insert(meal_data).execute()
                if meal_response.data:
                    meal_id = meal_response.data[0]["id"]
                    for uploaded_file in uploaded_files:
                        file_name = f"meals/{meal_id}_{uuid.uuid4()}.jpg"
                        file_bytes = uploaded_file.read()
                        supabase.storage.from_("photos").upload(file_name, file_bytes)
                        supabase.table("meal_photos").insert(
                            {"meal_id": meal_id, "photo_url": f"{SUPABASE_URL}/storage/v1/object/public/photos/{file_name}"}
                        ).execute()
                    st.success("Repas ajout√© avec succ√®s !")
                else:
                    st.error("Erreur lors de l'ajout du repas.")
            except Exception as e:
                st.error(f"Erreur inattendue : {str(e)}")

if menu == "Voir les repas":
    if st.session_state["user"] is None:
        st.warning("Veuillez vous connecter pour voir vos repas.")
    else:
        st.header("Vos repas")

        user_id = st.session_state["user"]["id"]
        meals = get_user_meals(user_id)

        if not meals:
            st.info("Aucun repas enregistr√©.")
        else:
            for meal in meals:
                photos = get_meal_photos(meal["id"])
                
                col1, col2 = st.columns([3, 1])  # Disposition : Infos √† gauche, photo √† droite
                with col1:
                    st.subheader(f"üç¥ {meal['name']}")  # Titre en gras avec emoji
                    st.write(f"**Calories**: {meal['calories']} kcal")
                    st.write(f"**Prot√©ines**: {meal['proteins']} g")
                    st.write(f"**Glucides**: {meal['carbs']} g")
                    st.write(f"**Lipides**: {meal['fats']} g")

                with col2:
                    if photos:
                        st.image(photos[0]["photo_url"], width=200)  # Miniature harmonieuse
                    else:
                        st.write("Pas de photo.")

                st.markdown("---")  # S√©paration visuelle
# Ajouter des entra√Ænements
if menu == "Ajouter un entra√Ænement":
    if st.session_state["user"] is None:
        st.warning("Veuillez vous connecter pour ajouter un entra√Ænement.")
    else:
        st.header("Ajouter un entra√Ænement")

        training_type = st.selectbox(
            "Type d‚Äôentra√Ænement", ["Course", "V√©lo", "Musculation", "Natation", "Marche"]
        )
        date = st.date_input("Date de l‚Äôentra√Ænement", value=datetime.now())
        duration = st.slider("Dur√©e (en minutes)", 0, 300, 60)
        calories_burned = st.slider("Calories br√ªl√©es", 0, 2000, 300)

        if st.button("Ajouter l‚Äôentra√Ænement"):
            user_id = st.session_state["user"]["id"]
            response = add_training(user_id, training_type, date, duration, calories_burned)
            if response.data:
                st.success("Entra√Ænement ajout√© avec succ√®s‚ÄØ!")
            else:
                st.error("Erreur lors de l'ajout de l'entra√Ænement.")

# Voir les performances sportives
if menu == "Voir les entra√Ænements":
    if st.session_state["user"] is None:
        st.warning("Veuillez vous connecter pour voir vos entra√Ænements.")
    else:
        st.header("Vos entra√Ænements")

        user_id = st.session_state["user"]["id"]
        trainings = get_user_trainings(user_id)

        if not trainings:
            st.info("Aucun entra√Ænement enregistr√©.")
        else:
            # Convertir les donn√©es en DataFrame
            df = pd.DataFrame(trainings)

            # Ajouter les colonnes format√©es pour un meilleur affichage
            df["Icone"] = df["training_type"].apply(get_training_icon)
            df["Date"] = pd.to_datetime(df["date"]).dt.strftime("%d %b %Y")  # Format : 01 Jan 2024
            df["Dur√©e (min)"] = df["duration"]
            df["Calories br√ªl√©es"] = df["calories_burned"]

            # Garder uniquement les colonnes n√©cessaires
            display_df = df[["Icone", "Date", "training_type", "Dur√©e (min)", "Calories br√ªl√©es"]]
            display_df.rename(
                columns={
                    "Icone": "Type",
                    "training_type": "Activit√©",
                },
                inplace=True,
            )

            # Utiliser AgGrid pour un tableau interactif
            gb = GridOptionsBuilder.from_dataframe(display_df)
            gb.configure_pagination(enabled=True)  # Activer la pagination
            gb.configure_column("Type", width=70)  # Ajuster la largeur de la colonne "Type"
            gb.configure_column("Activit√©", width=150)  # Ajuster la largeur de la colonne "Activit√©"
            gb.configure_column("Dur√©e (min)", width=100)  # Ajuster la largeur de la colonne "Dur√©e (min)"
            gb.configure_column("Calories br√ªl√©es", width=150)  # Ajuster la largeur de la colonne "Calories br√ªl√©es"

            grid_options = gb.build()

            st.markdown("### Tableau des entra√Ænements")
            AgGrid(
                display_df,
                gridOptions=grid_options,
                theme="balham",  # Th√®me clair
                fit_columns_on_grid_load=True,  # Adapter les colonnes √† la largeur
            )
            
# Suggestions personnalis√©es
if menu == "Suggestions personnalis√©es":
    if st.session_state["user"] is None:
        st.warning("Veuillez vous connecter pour voir vos suggestions.")
    else:
        st.header("Suggestions personnalis√©es")

        user_id = st.session_state["user"]["id"]
        trainings = get_user_trainings(user_id)
        meals = get_user_meals(user_id)

        if not trainings:
            st.info("Aucun entra√Ænement trouv√© pour g√©n√©rer des suggestions.")
        elif not meals:
            st.info("Aucun repas trouv√© pour g√©n√©rer des suggestions.")
        else:
            total_burned = sum([t["calories_burned"] for t in trainings])
            total_calories = sum([m["calories"] for m in meals])

            st.markdown(f"### **Calories br√ªl√©es cette semaine** : {total_burned} kcal")
            st.markdown(f"### **Calories consomm√©es cette semaine** : {total_calories} kcal")

            # Suggestions bas√©es sur le d√©ficit calorique
            deficit = total_burned - total_calories
            if deficit > 0:
                st.success(
                    f"Vous avez un d√©ficit calorique de {deficit} kcal. Nous vous recommandons de consommer des repas plus caloriques."
                )
            else:
                st.warning(
                    f"Vous avez un surplus calorique de {-deficit} kcal. Essayez de r√©duire les calories dans vos repas."
                )
# Visualisations avanc√©es
if menu == "Visualisations avanc√©es":
    if st.session_state["user"] is None:
        st.warning("Veuillez vous connecter pour acc√©der aux visualisations.")
    else:
        st.header("Visualisations avanc√©es")

        user_id = st.session_state["user"]["id"]
        trainings = get_user_trainings(user_id)
        meals = get_user_meals(user_id)

        if not trainings or not meals:
            st.info("Donn√©es insuffisantes pour g√©n√©rer des visualisations.")
        else:
            # Pr√©parer les donn√©es
            training_dates = [t["date"] for t in trainings]
            calories_burned = [t["calories_burned"] for t in trainings]
            meal_dates = [m["date"] for m in meals]
            calories_consumed = [m["calories"] for m in meals]

            # Graphique 1 : Calories br√ªl√©es vs consomm√©es
            plt.figure(figsize=(10, 5))
            plt.plot(training_dates, calories_burned, label="Calories br√ªl√©es", marker="o")
            plt.plot(meal_dates, calories_consumed, label="Calories consomm√©es", marker="o")
            plt.xlabel("Date")
            plt.ylabel("Calories")
            plt.title("Calories br√ªl√©es vs consomm√©es")
            plt.legend()
            st.pyplot(plt)
            
